<?phpnamespace model;require_once '../../config/Connection.php';require_once '../../Helper/ErrorMessage.php';use Exception;use ErrorMessage;class student extends \Connection{    public  function store(string $studentId, string $f_name, string $l_name, string $email, string $middle_name):void    {        try {            $query = "INSERT INTO student(studentId, f_name, l_name, email, middle_name)VALUES (?,?,?,?,?)";            $stmt = $this->Connect()->prepare($query);            if (!$stmt){                ErrorMessage::JsonResponse(false,'Failed to Prepared Statement');            }            $stmt->bind_param('sssss',$studentId,$f_name,$l_name,$email,$middle_name);            if ($stmt->execute()){                ErrorMessage::JsonResponse(true, 'Successfully Created New Student');            }        }catch (Exception $e){            error_log('Error'.$e->getMessage());        }    }    public function studentIdChecker( string $studentId):bool    {        $query = "SELECT studentId FROM student WHERE studentId = ?";        $stmt = $this->Connect()->prepare($query);        if (!$stmt){            ErrorMessage::JsonResponse(false,'Failed to Prepared Statement');        }        $stmt->bind_param('s',$studentId);        $stmt->execute();        $result = $stmt->get_result();        if ($result->num_rows > 0){            return true;        }else{            return false;        }    }    public function showAll():array    {        try {            $result = $this->Connect()->query("SELECT * FROM student");            $data = [];            if ($result->num_rows > 0){                while ($row = $result->fetch_assoc()){                    $data[] = $row;                }                return $data;            }        }catch (Exception $e){            error_log('Error'. $e->getMessage());        }        return [];    }    public  function delete(int $id):void    {        try {            $query = "DELETE FROM student WHERE id = ?";            $stmt = $this->Connect()->prepare($query);            if (!$stmt){                ErrorMessage::JsonResponse(false,'Failed to Prepared Statement');            }            $stmt->bind_param('s',$id);            if ($stmt->execute()){                ErrorMessage::JsonResponse(true,'Student is Successfully Deleted');            }        }catch (Exception $e){            error_log('Error'. $e->getMessage());        }    }    public function update(string $studentId , string $f_name, string $l_name, string $email, string $m_name, int $id):void    {        try {            $query = "UPDATE student SET studentId = ? , f_name = ? , l_name = ? , email = ? , middle_name = ? WHERE id = ?";            $stmt = $this->Connect()->prepare($query);            if (!$stmt){                ErrorMessage::JsonResponse(false,'Failed to Prepared Statement');            }            $stmt->bind_param('sssssi',$studentId,$f_name,$l_name,$email,$m_name,$id);            if ($stmt->execute()){                ErrorMessage::JsonResponse(true,'Student is Successfully Updated');            }        }catch (Exception $e){            error_log('Error'. $e->getMessage());        }    }    public function CountStudent(): int    {        try {            $query = "SELECT COUNT(*) AS total_student FROM student";            $result = $this->Connect()->query($query);            if ($result) {                $row = $result->fetch_assoc();                return (int) $row['total_student'];            }        }catch (Exception $e){            error_log('Error' .$e->getMessage());        }        return 0; // Default kung may error    }}